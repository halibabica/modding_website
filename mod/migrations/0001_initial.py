# Generated by Django 2.2.2 on 2019-08-15 11:54

from django.conf import settings
import django.contrib.postgres.indexes
import django.contrib.postgres.search
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mod.models
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Mod',
            fields=[
                ('modID', models.AutoField(primary_key=True, serialize=False, unique=True, verbose_name='mod id')),
                ('modDate', models.DateTimeField(null=True, verbose_name='mod publish date')),
                ('modUpdate', models.DateTimeField(verbose_name='mod most recent update date')),
                ('modDownloads', models.IntegerField(blank=True, null=True, verbose_name='')),
                ('modStatus', models.CharField(choices=[('Full release', 'Full release'), ('Demo', 'Demo'), ('Concept', 'Concept')], default=('Full release', 'Full release'), max_length=100)),
                ('modName', models.CharField(max_length=100, verbose_name='mod name')),
                ('modDescription', models.CharField(max_length=10000, verbose_name='mod description')),
                ('modWebsite', models.CharField(blank=True, max_length=100, verbose_name='mod website')),
                ('modCreditPerms', models.CharField(blank=True, max_length=1000, verbose_name='mod credits and permissions')),
                ('modDonations', models.CharField(blank=True, max_length=1000, verbose_name='mod donation link')),
                ('modDiscord', models.CharField(blank=True, max_length=100, verbose_name='mod discord link')),
                ('modUpload', models.FileField(blank=True, null=True, upload_to=mod.models.mod_directory_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['zip', 'rar'])])),
                ('modUploadURL', models.URLField(blank=True, max_length=1000, verbose_name='mod upload destination')),
                ('modPlayTimeHours', models.IntegerField(blank=True, default=0, null=True, verbose_name='mod average playtime hours')),
                ('modPlayTimeMinutes', models.IntegerField(blank=True, default=0, null=True, verbose_name='mod average playtime minutes')),
                ('modSearch', django.contrib.postgres.search.SearchVectorField(null=True)),
                ('modRating', models.IntegerField(blank=True, default=0, null=True, verbose_name='mod average rating')),
                ('modAuthor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='ReviewRating',
            fields=[
                ('reviewid', models.AutoField(primary_key=True, serialize=False, verbose_name='review id')),
                ('reviewAuthor', models.CharField(max_length=100, verbose_name='review author name')),
                ('reviewDate', models.DateTimeField(auto_now_add=True, verbose_name='review date')),
                ('reviewComment', models.CharField(blank=True, max_length=10000, verbose_name='review comment')),
                ('reviewVotes', models.IntegerField(default=0, verbose_name='total votes for comment')),
                ('reviewModID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviewModID', to='mod.Mod')),
            ],
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('voteID', models.AutoField(primary_key=True, serialize=False, verbose_name='vote ID')),
                ('voteAuthor', models.CharField(max_length=100, verbose_name='vote author name')),
                ('voteValue', models.SmallIntegerField(default=0, verbose_name='vote value')),
                ('voteReviewID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mod.ReviewRating')),
            ],
            options={
                'unique_together': {('voteAuthor', 'voteReviewID')},
            },
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('ratingID', models.AutoField(primary_key=True, serialize=False, verbose_name='rating ID')),
                ('ratingValue', models.PositiveSmallIntegerField(default=0, verbose_name='rating value')),
                ('ratingAuthorID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('ratingModID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mod.Mod')),
            ],
            options={
                'unique_together': {('ratingAuthorID', 'ratingModID')},
            },
        ),
        migrations.AddIndex(
            model_name='mod',
            index=django.contrib.postgres.indexes.GinIndex(fields=['modSearch'], name='mod_mod_modSear_610d76_gin'),
        ),
    ]
